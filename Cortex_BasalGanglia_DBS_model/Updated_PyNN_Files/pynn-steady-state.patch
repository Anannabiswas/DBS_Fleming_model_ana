diff -ur --strip-trailing-cr Lib/site-packages/pyNN-vanilla/common/control.py Lib/site-packages/pyNN/common/control.py
--- Lib/site-packages/pyNN-vanilla/common/control.py	2022-08-16 11:01:29.656661200 +0100
+++ Lib/site-packages/pyNN/common/control.py	2022-08-16 11:03:15.570190700 +0100
@@ -8,7 +8,7 @@
     is intended to be reused)
   * function factories for generating backend-specific API functions.

-:copyright: Copyright 2006-2021 by the PyNN team, see AUTHORS.
+:copyright: Copyright 2006-2016 by the PyNN team, see AUTHORS.
 :license: CeCILL, see LICENSE for details.
 """

@@ -21,22 +21,21 @@

 class BaseState(object):
     """Base class for simulator _State classes."""
-
+
     def __init__(self):
         """Initialize the simulator."""
         self.running = False
         self.t_start = 0
-        # a list of (population, variable, filename) combinations that should be written to file on end()
-        self.write_on_end = []
+        self.write_on_end = []  # a list of (population, variable, filename) combinations that should be written to file on end()
         self.recorders = set([])


 def setup(timestep=DEFAULT_TIMESTEP, min_delay=DEFAULT_MIN_DELAY,
-          **extra_params):
+           **extra_params):
     """
     Initialises/reinitialises the simulator. Any existing network structure is
     destroyed.
-
+
     `timestep`, `min_delay` and `max_delay` should all be in milliseconds.

     `extra_params` contains any keyword arguments that are required by a given
@@ -48,11 +47,10 @@
         if param in extra_params:
             raise Exception("%s is not a valid argument for setup()" % param)
     if min_delay != 'auto':
-        if max_delay != 'auto' and min_delay > max_delay:
+        if min_delay > max_delay:
             raise Exception("min_delay has to be less than or equal to max_delay.")
         if min_delay < timestep:
-            raise Exception("min_delay (%g) must be greater than timestep (%g)" %
-                            (min_delay, timestep))
+            raise Exception("min_delay (%g) must be greater than timestep (%g)" % (min_delay, timestep))


 def end(compatible_output=True):
@@ -61,10 +59,10 @@


 def build_run(simulator):
-    def run_until(time_point, callbacks=None):
+    def run_until(time_point, run_from_steady_state=False, callbacks=None):
         """
         Advance the simulation until `time_point` (in ms).
-
+
         `callbacks` is an optional list of callables, each of which should
         accept the current time as an argument, and return the next time it
         wishes to be called.
@@ -90,15 +88,15 @@
                 next = min(next, time_point)
                 simulator.state.run_until(next)
                 callback_events.extend((callback(simulator.state.t), callback)
-                                       for callback in active_callbacks)
+                        for callback in active_callbacks)
         else:
-            simulator.state.run_until(time_point)
+            simulator.state.run_until(time_point, run_from_steady_state)
         return simulator.state.t

-    def run(simtime, callbacks=None):
+    def run(simtime, run_from_steady_state=False, callbacks=None):
         """
         Advance the simulation by `simtime` ms.
-
+
         `callbacks` is an optional list of callables, each of which should
         accept the current time as an argument, and return the next time it
         wishes to be called.
@@ -110,15 +108,53 @@
         followed by ``run(y)``. If you wish to reset the simulation state to
         the initial conditions (time ``t = 0``), use the ``reset()`` function.
         """
-        return run_until(simulator.state.t + simtime, callbacks)
-    return run, run_until
+        return run_until(simulator.state.t + simtime, run_from_steady_state, callbacks)
+
+    def run_to_steady_state(time_point):
+        """
+        Advance the simulation until `time_point` (in ms).
+
+        `callbacks` is an optional list of callables, each of which should
+        accept the current time as an argument, and return the next time it
+        wishes to be called.

+        ``run_until()`` and ``run()`` may be combined freely. See the
+        documentation of the ``run()`` function for further information.
+        """
+        now = simulator.state.t
+        if time_point - now < -simulator.state.dt / 2.0:  # allow for floating point error
+            raise ValueError("Time %g is in the past (current time %g)" % (time_point, now))
+
+        simulator.state.run_to_steady_state(time_point)
+
+        return simulator.state.t
+
+    def run_from_steady_state(time_point):
+        """
+        Advance the simulation until `time_point` (in ms).
+
+        `callbacks` is an optional list of callables, each of which should
+        accept the current time as an argument, and return the next time it
+        wishes to be called.
+
+        ``run_until()`` and ``run()`` may be combined freely. See the
+        documentation of the ``run()`` function for further information.
+        """
+        now = simulator.state.t
+        if time_point - now < -simulator.state.dt / 2.0:  # allow for floating point error
+            raise ValueError("Time %g is in the past (current time %g)" % (time_point, now))
+
+        simulator.state.run_from_steady_state(time_point)
+
+        return simulator.state.t
+
+    return run, run_until, run_to_steady_state, run_from_steady_state

 def build_reset(simulator):
     def reset(annotations={}):
         """
         Reset the time to zero, neuron membrane potentials and synaptic weights to
-        their initial values, and begin a new Segment for recorded data.
+        their initial values, and begin a new Segment for recorded data.
         The network structure is not changed, nor are neuron/synapse parameters,
         nor the specification of which neurons to record from.
         """
diff -ur --strip-trailing-cr Lib/site-packages/pyNN-vanilla/neuron/__init__.py Lib/site-packages/pyNN/neuron/__init__.py
--- Lib/site-packages/pyNN-vanilla/neuron/__init__.py	2022-08-16 11:01:29.958851800 +0100
+++ Lib/site-packages/pyNN/neuron/__init__.py	2022-08-16 10:34:59.471931000 +0100
@@ -2,7 +2,7 @@
 """
 nrnpython implementation of the PyNN API.

-:copyright: Copyright 2006-2021 by the PyNN team, see AUTHORS.
+:copyright: Copyright 2006-2016 by the PyNN team, see AUTHORS.
 :license: CeCILL, see LICENSE for details.

 """
@@ -96,10 +96,9 @@
         io = get_io(filename)
         population.write_data(io, variables)
     simulator.state.write_on_end = []
-    # simulator.state.finalize()
+    #simulator.state.finalize()

-
-run, run_until = common.build_run(simulator)
+run, run_until, run_to_steady_state, run_from_steady_state = common.build_run(simulator)
 run_for = run

 reset = common.build_reset(simulator)
@@ -111,7 +110,7 @@
 # ==============================================================================

 get_current_time, get_time_step, get_min_delay, get_max_delay, \
-    num_processes, rank = common.build_state_queries(simulator)
+            num_processes, rank = common.build_state_queries(simulator)


 # ==============================================================================
@@ -126,10 +125,8 @@

 record = common.build_record(simulator)

+record_v = lambda source, filename: record(['v'], source, filename)

-def record_v(source, filename): return record(['v'], source, filename)
-
-
-def record_gsyn(source, filename): return record(['gsyn_exc', 'gsyn_inh'], source, filename)
+record_gsyn = lambda source, filename: record(['gsyn_exc', 'gsyn_inh'], source, filename)

 # ==============================================================================
diff -ur --strip-trailing-cr Lib/site-packages/pyNN-vanilla/neuron/simulator.py Lib/site-packages/pyNN/neuron/simulator.py
--- Lib/site-packages/pyNN-vanilla/neuron/simulator.py	2022-08-16 11:01:29.964835000 +0100
+++ Lib/site-packages/pyNN/neuron/simulator.py	2022-08-16 10:43:59.594286400 +0100
@@ -15,15 +15,19 @@
 All other functions and classes are private, and should not be used by other
 modules.

-:copyright: Copyright 2006-2021 by the PyNN team, see AUTHORS.
+:copyright: Copyright 2006-2016 by the PyNN team, see AUTHORS.
 :license: CeCILL, see LICENSE for details.

 """

+try:
+    xrange
+except NameError:
+    xrange = range
 from pyNN import __path__ as pyNN_path
 from pyNN import common
 import logging
-import numpy as np
+import numpy
 import os.path
 from neuron import h, nrn_dll_loaded
 from operator import itemgetter
@@ -31,9 +35,9 @@
 logger = logging.getLogger("PyNN")
 name = "NEURON"  # for use in annotating output data

-# Instead of starting the projection var-GID range from 0, the first _MIN_PROJECTION_VARGID are
+# Instead of starting the projection var-GID range from 0, the first _MIN_PROJECTION_VARGID are
 # reserved for other potential uses
-_MIN_PROJECTION_VARGID = 1000000
+_MIN_PROJECTION_VARGID = 1000000

 # --- Internal NEURON functionality --------------------------------------------

@@ -59,12 +63,19 @@
     # in case NEURON is assuming a different architecture to Python,
     # we try multiple possibilities
     arch_list = [platform.machine(), 'i686', 'x86_64', 'powerpc', 'umac']
-    for arch in arch_list:
-        lib_path = os.path.join(path, arch, '.libs', 'libnrnmech.so')
+    if os.name == 'nt':
+        lib_path = os.path.join(path, 'nrnmech.dll')
         if os.path.exists(lib_path):
             h.nrn_load_dll(lib_path)
             nrn_dll_loaded.append(path)
             return
+    else:
+        for arch in arch_list:
+            lib_path = os.path.join(path, arch, '.libs', 'libnrnmech.so')
+            if os.path.exists(lib_path):
+                h.nrn_load_dll(lib_path)
+                nrn_dll_loaded.append(path)
+                return
     raise IOError("NEURON mechanisms not found in %s. You may need to run 'nrnivmodl' in this directory." % path)


@@ -81,8 +92,8 @@
     """
     native_rng = h.Random(0 or rng.seed)
     rarr = [getattr(native_rng, distribution)(*parameters)]
-    rarr.extend([native_rng.repick() for j in range(n - 1)])
-    return np.array(rarr)
+    rarr.extend([native_rng.repick() for j in xrange(n - 1)])
+    return numpy.array(rarr)


 def h_property(name):
@@ -197,6 +208,10 @@
         else:
             nc = h.NetCon(source, None, sec=section)
         self.parallel_context.cell(gid, nc)                     # } with the gid (using a temporary NetCon)
+        # Check if gid is along the main axon of collateral neuron
+        if gid>2e6:
+            self.parallel_context.threshold(gid, -10)
+
         self.gid_sources.append(source)  # gid_clear (in _State.reset()) will cause a
                                         # segmentation fault if any of the sources
                                         # registered using pc.cell() no longer exist, so
@@ -248,14 +263,66 @@
             for iclamp in source._devices:
                 source._update_iclamp(iclamp, tstop)

-    def run(self, simtime):
+    def run(self, simtime, run_from_steady_state=False):
         """Advance the simulation for a certain time."""
-        self.run_until(self.tstop + simtime)
+        self.run_until(self.tstop + simtime, run_from_steady_state)

-    def run_until(self, tstop):
+    def run_until(self, tstop, run_from_steady_state=False):
         self._update_current_sources(tstop)
         self._pre_run()
+        self.parallel_context.set_maxstep(self.default_maxstep)
         self.tstop = tstop
+
+        # check if we need to load the steady state for our simulation
+        if run_from_steady_state:
+            h.stdinit()
+
+            ns = h.SaveState()
+            sf = h.File('steady_state.bin')
+            ns.fread(sf)
+            #print("Time before restore = %g ms" % h.t)
+            ns.restore(0)
+            #print("Time after restore = %g ms" % h.t)
+            h.cvode_active(0)
+
+        #logger.info("Running the simulation until %g ms" % tstop)
+        if self.tstop > self.t:
+            self.parallel_context.psolve(self.tstop)
+
+    def run_to_steady_state(self, tstop):
+        self._update_current_sources(tstop)
+        self._pre_run()
+        self.parallel_context.set_maxstep(self.default_maxstep)
+        self.tstop = tstop
+
+        #logger.info("Running the simulation until steady state: %g ms" % tstop)
+        if self.tstop > self.t:
+            self.parallel_context.psolve(self.tstop)
+        # Make object to save the model state
+        svstate = h.SaveState()
+
+        # Save the model state and write it to file
+        svstate.save()
+        f = h.File("steady_state.bin")
+        svstate.fwrite(f)
+        #print("Steady State written to file!")
+
+    def run_from_steady_state(self, tstop):
+        self._update_current_sources(tstop)
+        self._pre_run()
+        self.parallel_context.set_maxstep(self.default_maxstep)
+        self.tstop = tstop
+
+        h.stdinit()
+
+        ns = h.SaveState()
+        sf = h.File('steady_state.bin')
+        ns.fread(sf)
+        #print("Time before restore = %g ms" % h.t)
+        ns.restore(0)
+
+        h.cvode_active(0)
+        #print("Time after restore = %g ms" % h.t)
         #logger.info("Running the simulation until %g ms" % tstop)
         if self.tstop > self.t:
             self.parallel_context.psolve(self.tstop)
@@ -270,8 +337,8 @@

     def get_vargids(self, projection, pre_idx, post_idx):
         """
-        Get new "variable"-GIDs (as opposed to the "cell"-GIDs) for a given pre->post connection
-        pair for a given projection.
+        Get new "variable"-GIDs (as opposed to the "cell"-GIDs) for a given pre->post connection
+        pair for a given projection.

         `projection`  -- projection
         `pre_idx`     -- index of the presynaptic cell
@@ -283,12 +350,12 @@
             # Get the projection with the current maximum vargid offset
             if len(self.vargid_offsets):
                 newest_proj, offset = max(self.vargid_offsets.items(), key=itemgetter(1))
-                # Allocate it a large enough range for a mutual all-to-all connection (assumes that
+                # Allocate it a large enough range for a mutual all-to-all connection (assumes that
                 # there are no duplicate pre_idx->post_idx connections for the same projection. If
                 # that is really desirable a new projection will need to be used)
                 offset += 2 * len(newest_proj.pre) * len(newest_proj.post)
             else:
-                offset = _MIN_PROJECTION_VARGID
+                offset = _MIN_PROJECTION_VARGID
             self.vargid_offsets[projection] = offset
         pre_post_vargid = offset + 2 * (pre_idx + post_idx * len(projection.pre))
         post_pre_vargid = pre_post_vargid + 1
@@ -318,7 +385,19 @@
         """
         gid = int(self)
         self._cell = cell_model(**cell_parameters)          # create the cell object
-        state.register_gid(gid, self._cell.source, section=self._cell.source_section)
+
+        # Check if _cell.source is a dictionary
+        if isinstance(self._cell.source, dict):
+            for k, v in self._cell.source.items():
+                if k=='soma':
+                    state.register_gid(gid+1e6, self._cell.source['soma'], section=self._cell.source_section['soma'])
+                elif k=='middle_axon_node':
+                    state.register_gid(gid+2e6, self._cell.source['middle_axon_node'], section=self._cell.source_section['middle_axon_node'])
+                elif k=='collateral':
+                    state.register_gid(gid, self._cell.source['collateral'], section=self._cell.source_section['collateral'])
+        else:
+            state.register_gid(gid, self._cell.source, section=self._cell.source_section)
+
         if hasattr(self._cell, "get_threshold"):            # this is not adequate, since the threshold may be changed after cell creation
             state.parallel_context.threshold(int(self), self._cell.get_threshold())  # the problem is that self._cell does not know its own gid

@@ -347,7 +426,13 @@
         #logger.debug("Creating connection from %d to %d, weight %g" % (pre, post, parameters['weight']))
         self.presynaptic_index = pre
         self.postsynaptic_index = post
-        self.presynaptic_cell = projection.pre[pre]
+        if projection.source=='soma':
+            self.presynaptic_cell = projection.pre[pre] + 1e6
+        elif projection.source=='middle_axon_node':
+            self.presynaptic_cell = projection.pre[pre] + 2e6
+        else:
+            self.presynaptic_cell = projection.pre[pre]
+
         self.postsynaptic_cell = projection.post[post]
         if "." in projection.receptor_type:
             section, target = projection.receptor_type.split(".")
@@ -459,46 +544,46 @@
         self.postsynaptic_index = post
         segment_name = projection.receptor_type
         # Strip 'gap' string from receptor_type (not sure about this, it is currently appended to
-        # the available synapse types in the NCML model segments but is not really necessary and
+        # the available synapse types in the NCML model segments but is not really necessary and
         # it feels a bit hacky but it makes the list of receptor types more comprehensible)
-        if segment_name.endswith('.gap'):
+        if segment_name.endswith('.gap'):
             segment_name = segment_name[:-4]
         self.segment = getattr(projection.post[post]._cell, segment_name)
         pre_post_vargid, post_pre_vargid = state.get_vargids(projection, pre, post)
-        self._make_connection(self.segment, parameters.pop('weight'), pre_post_vargid,
+        self._make_connection(self.segment, parameters.pop('weight'), pre_post_vargid,
                               post_pre_vargid, projection.pre[pre], projection.post[post])
-
+
     def _make_connection(self, segment, weight, local_to_remote_vargid, remote_to_local_vargid,
-                         local_gid, remote_gid):
+                         local_gid, remote_gid):
         logger.debug("Setting source_var on local cell {} to connect to target_var on remote "
                      "cell {} with vargid {} on process {}"
-                    .format(local_gid, remote_gid, local_to_remote_vargid,
+                    .format(local_gid, remote_gid, local_to_remote_vargid,
                             state.mpi_rank))
-        # Set up the source reference for the local->remote connection
-        state.parallel_context.source_var(segment(0.5)._ref_v, local_to_remote_vargid)
+        # Set up the source reference for the local->remote connection
+        state.parallel_context.source_var(segment(0.5)._ref_v, local_to_remote_vargid)
         # Create the gap_junction and set its weight
         self.gap = h.Gap(0.5, sec=segment)
         self.gap.g = weight
         # Connect the gap junction with the source_var
         logger.debug("Setting target_var on local cell {} to connect to source_var on remote "
                      "cell {} with vargid {} on process {}"
-                    .format(local_gid, remote_gid, remote_to_local_vargid,
+                    .format(local_gid, remote_gid, remote_to_local_vargid,
                             state.mpi_rank))
         # set up the target reference for the remote->local connection
         state.parallel_context.target_var(self.gap._ref_vgap, remote_to_local_vargid)
-
+
     def _set_weight(self, w):
         self.gap.g = w

     def _get_weight(self):
         """Gap junction conductance in µS."""
         return self.gap.g
-
+
     weight = property(_get_weight, _set_weight)
-
+
     def as_tuple(self, *attribute_names):
         return tuple(getattr(self, name) for name in attribute_names)
-
+

 class GapJunctionPresynaptic(GapJunction):
     """
@@ -506,19 +591,19 @@
     so it shares its functionality with the GapJunction connection object, with the exception that
     the pre and post synaptic cells are switched
     """
-
+
     def __init__(self, projection, pre, post, **parameters):
         self.presynaptic_index = pre
         self.postsynaptic_index = post
-        if projection.source.endswith('.gap'):
+        if projection.source.endswith('.gap'):
             segment_name = projection.source[:-4]
         else:
             segment_name = projection.source
         self.segment = getattr(projection.pre[pre]._cell, segment_name)
         pre_post_vargid, post_pre_vargid = state.get_vargids(projection, pre, post)
-        self._make_connection(self.segment, parameters.pop('weight'), post_pre_vargid,
+        self._make_connection(self.segment, parameters.pop('weight'), post_pre_vargid,
                               pre_post_vargid, projection.post[post], projection.pre[pre])
-
+

 def generate_synapse_property(name):
     def _get(self):
@@ -527,12 +612,12 @@
     def _set(self, val):
         setattr(self.weight_adjuster, name, val)
     return property(_get, _set)
-setattr(Connection, 'wmax', generate_synapse_property('wmax'))
-setattr(Connection, 'wmin', generate_synapse_property('wmin'))
-setattr(Connection, 'aLTP', generate_synapse_property('aLTP'))
-setattr(Connection, 'aLTD', generate_synapse_property('aLTD'))
-setattr(Connection, 'tauLTP', generate_synapse_property('tauLTP'))
-setattr(Connection, 'tauLTD', generate_synapse_property('tauLTD'))
+setattr(Connection, 'w_max', generate_synapse_property('wmax'))
+setattr(Connection, 'w_min', generate_synapse_property('wmin'))
+setattr(Connection, 'A_plus', generate_synapse_property('aLTP'))
+setattr(Connection, 'A_minus', generate_synapse_property('aLTD'))
+setattr(Connection, 'tau_plus', generate_synapse_property('tauLTP'))
+setattr(Connection, 'tau_minus', generate_synapse_property('tauLTD'))
 setattr(Connection, 'U', generate_synapse_property('U'))
 setattr(Connection, 'tau_rec', generate_synapse_property('tau_rec'))
 setattr(Connection, 'tau_facil', generate_synapse_property('tau_facil'))
diff -ur --strip-trailing-cr Lib/site-packages/pyNN-vanilla/neuron/standardmodels/electrodes.py Lib/site-packages/pyNN/neuron/standardmodels/electrodes.py
--- Lib/site-packages/pyNN-vanilla/neuron/standardmodels/electrodes.py	2022-08-16 11:01:29.955895500 +0100
+++ Lib/site-packages/pyNN/neuron/standardmodels/electrodes.py	2022-08-16 10:40:16.606190500 +0100
@@ -7,13 +7,13 @@
     NoisyCurrentSource -- a Gaussian whitish noise current.
     ACSource           -- a sine modulated current.

-:copyright: Copyright 2006-2021 by the PyNN team, see AUTHORS.
+:copyright: Copyright 2006-2016 by the PyNN team, see AUTHORS.
 :license: CeCILL, see LICENSE for details.

 """

 from neuron import h
-import numpy as np
+import numpy
 from pyNN.standardmodels import electrodes, build_translations, StandardCurrentSource
 from pyNN.parameters import ParameterSpace, Sequence
 from pyNN.neuron import simulator
@@ -93,8 +93,8 @@
         if not (times >= 0.0).all():
             raise ValueError("Step current cannot accept negative timestamps.")
         # ensure that times provided are of strictly increasing magnitudes
-        dt_times = np.diff(times)
-        if not all(dt_times > 0.0):
+        dt_times = numpy.diff(times)
+        if not all(dt_times>0.0):
             raise ValueError("Step current timestamps should be monotonically increasing.")
         # map timestamps to actual simulation time instants based on specified dt
         for ind in range(len(times)):
@@ -113,11 +113,10 @@
     def set_native_parameters(self, parameters):
         parameters.evaluate(simplify=True)
         for name, value in parameters.items():
-            if name == "amplitudes":  # key used only by StepCurrentSource
+            if name == "amplitudes": # key used only by StepCurrentSource
                 step_times = parameters["times"].value
                 step_amplitudes = parameters["amplitudes"].value
-                step_times, step_amplitudes = self._check_step_times(
-                    step_times, step_amplitudes, simulator.state.dt)
+                step_times, step_amplitudes = self._check_step_times(step_times, step_amplitudes, simulator.state.dt)
                 parameters["times"].value = step_times
                 parameters["amplitudes"].value = step_amplitudes
             if isinstance(value, Sequence):  # this shouldn't be necessary, but seems to prevent a segfault
@@ -136,7 +135,11 @@
                     raise TypeError("Can't inject current into a spike source.")
                 if not (id in self._h_iclamps):
                     self.cell_list += [id]
-                    self._h_iclamps[id] = h.IClamp(0.5, sec=id._cell.source_section)
+                    # Check if there is more than one source on the cell - only insert current into soma
+                    if isinstance(id._cell.source_section, dict):
+                        self._h_iclamps[id] = h.IClamp(0.5, sec=id._cell.source_section['soma'])
+                    else:
+                        self._h_iclamps[id] = h.IClamp(0.5, sec=id._cell.source_section)
                     self._devices.append(self._h_iclamps[id])

     def record(self):
@@ -152,9 +155,9 @@
         # This requires removing the first element from the current Vector
         # as NEURON computes the currents one time step later. The vector length
         # is compensated by repeating the last recorded value of current.
-        t_arr = np.array(self.record_times)
-        i_arr = np.array(self.itrace)[1:]
-        i_arr = np.append(i_arr, i_arr[-1])
+        t_arr = numpy.array(self.record_times)
+        i_arr = numpy.array(self.itrace)[1:]
+        i_arr = numpy.append(i_arr, i_arr[-1])
         return (t_arr, i_arr)


@@ -211,10 +214,9 @@
     def _generate(self):
         # Not efficient at all... Is there a way to have those vectors computed on the fly ?
         # Otherwise should have a buffer mechanism
-        temp_num_t = int(round(((self.stop + simulator.state.dt) - self.start) / simulator.state.dt))
-        tmp = simulator.state.dt * np.arange(temp_num_t)
-        self.times = tmp + self.start
-        self.amplitudes = self.offset + self.amplitude * np.sin(tmp * 2 * np.pi * self.frequency / 1000. + 2 * np.pi * self.phase / 360)
+        self.times = numpy.arange(self.start, self.stop + simulator.state.dt, simulator.state.dt)
+        tmp = numpy.arange(0, self.stop - self.start, simulator.state.dt)
+        self.amplitudes = self.offset + self.amplitude * numpy.sin(tmp * 2 * numpy.pi * self.frequency / 1000. + 2 * numpy.pi * self.phase / 360)
         self.amplitudes[-1] = 0.0


@@ -238,10 +240,9 @@
         self._generate()

     def _generate(self):
-        # Not efficient at all... Is there a way to have those vectors computed on the fly ?
-        # Otherwise should have a buffer mechanism
-        temp_num_t = int(round((self.stop - self.start) / max(self.dt, simulator.state.dt)))
-        self.times = self.start + max(self.dt, simulator.state.dt) * np.arange(temp_num_t)
-        self.times = np.append(self.times, self.stop)
-        self.amplitudes = self.mean + self.stdev * np.random.randn(len(self.times))
+        ## Not efficient at all... Is there a way to have those vectors computed on the fly ?
+        ## Otherwise should have a buffer mechanism
+        self.times = numpy.arange(self.start, self.stop, max(self.dt, simulator.state.dt))
+        self.times = numpy.append(self.times, self.stop)
+        self.amplitudes = self.mean + self.stdev * numpy.random.randn(len(self.times))
         self.amplitudes[-1] = 0.0
